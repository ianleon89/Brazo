/*
   ********************* Authors *********************
   ***** Laboratorio de Sistemas Embebidos (LSE) *****
   *****    http://laboratorios.fi.uba.ar/lse    *****
   ******************* 20/12/2011 ********************
     Ezequiel Espósito <ezequiel.esposito@gmail.com>
         Alan Kharsansky <akharsa@gmail.com>
       Federico Roasio <federoasio@gmail.com>
     Daniel Schermuk <daniel.schermuk@gmail.com>
   ***************************************************
*/


#ifdef __USE_CMSIS
#include "LPC17xx.h"
#endif
#include "freq.h"
#include "adc.h"
#include "debug.h"
#include "small_systick.h"
#include <stdint.h>
#include "uart.h"

//#include "type.h"
#include <string.h>
#include "rtc.h"
#include "iap_driver.h"
#include <math.h>
#include "cr_dsplib.h"


#include "definitions.h"

#include <stdint.h>
#include <GLCDPrimitives.h>
#include <GLCDLowLevel.h>
#include <GLCDColor.h>
#include "rtc.h"
#include "iap_driver.h"

#define CONFIG_FLASH_OFFSET            0x0000F000
#define CONFIG_FLASH_SECTOR            (CONFIG_FLASH_OFFSET >> 12)
#define CONFIG_FLASH_SECTOR_SIZE    1

#define READ_FLASH(object, adr) (*((object volatile *) (adr)))

#define LARGO 999
#define CAMPO 50

volatile uint32_t SysTickCount;		/* counts 10ms timeTicks */
uint32_t DelayStart_SysTickCount;

uint32_t volt, lectura, k,j,w;
uint16_t val, val1,  NumPantalla, TMedicion, ModoData;
uint8_t CantMediciones, Calibracion, MedTie;
uint16_t salid;
uint16_t Dia, Mes, Year, Hora, Minutos, Segundos;  // Para seteo
const uint8_t VecTMedicion[3]={5,30,120};
volatile int16_t vector[4096],promedio;


float Factor[5];  // Pendiente de la recta Temperatura vs. Raw
uint32_t Raw0[5];        // Ordenada al origen de la misma Temp. vs Raw

extern volatile uint32_t UART1Count;
extern volatile uint8_t UART1Buffer[BUFSIZE];

volatile uint32_t inicio,final;

uint32_t LeePesado[5];

const char* welcomeMsg = "SQue programon2:W";
const char* saltolinea = "\n";
const char* carreturn = "\r";
//const char* saltolinea = 10;
//const char* carreturn = 13;
const char* coma = ",";

char mens3[20], FechaHora[50];
char aux[10];
char cadena [2*LARGO];
static char stringMemory[4*LARGO];
char estafeta[50];

uint16_t AN, ME, DI, HO, MI, SE;
uint8_t FH[15];
uint8_t MemoriaVacia;
uint16_t m;
uint32_t diferencia;
uint16_t c,q,Dale,LargoEnvio;
uint8_t Sensor, NumFiltro, NumRepe;

RTCTime local_time, alarm_time, current_time;
uint16_t coso1;
__e_iap_status iap_status;

volatile static uint16_t coso2;

/* Enumerate number of FFT points to be tested */
#define NPOINTS_64			64
#define NPOINTS_256			256
#define NPOINTS_1024		1024
#define NPOINTS_4096		4096

/* Define which function to test */
//#define NPOINTS				NPOINTS_256
#define NPOINTS				NPOINTS_1024

/* Test functions */
static void vTest_PerformFFT(void);

/* Storage for FFT input and output values. Complex values are used consisting
   of real and imaginary parts, hence the buffers are twice the number of
   points */
static short *psi_Input  = (short *)0x2007C000; /* AHB SRAM0 */
static short *psi_Output = (short *)0x20080000; /* AHB SRAM1 */


void MiraUART1(void);
void ConstruyeFH(void);
void LeeMemoria(void);
void BorraYGraba(void);
void Concatena(void);


void GLCD_Bmp (unsigned char *bmp) {
  unsigned int   j;
  unsigned short *bitmap_ptr = (unsigned short *)bmp;
  j=0;
  strcpy(cadena,"");
//  for (j = 0; j < 2*LARGO; j++) {
  while((bitmap_ptr != NULL) && (j<2*LARGO)){
	  //	  demo_messg_blank[j]=*bitmap_ptr++;
	  cadena[j++]=*bitmap_ptr++;
  }
  if(strlen(cadena)>2) {
	  MemoriaVacia=0;
  }
  else{
	  MemoriaVacia=1;
  }
}


char* itoa(int i, char b[]){
    char const digit[] = "0123456789";
    char* p = b;
    if(i<0){
        *p++ = '-';
        i *= -1;
    }
    int shifter = i;
    do{ //Move to where representation ends
        ++p;
        shifter = shifter/10;
    }while(shifter);
    *p = '\0';
    do{ //Move back, inserting digits as u go
        *--p = digit[i%10];
        i = i/10;
    }while(i);
    return b;
}

/*----------------------------------------------------------------------------
  SysTick_Handler
 *----------------------------------------------------------------------------*/
void SysTick_Handler(void)
{
    SysTickCount++; 				/* increment counter necessary in Delay() */
}

void IniciarVariables(void){
	uint32_t j;
    for(j=0;j<NPOINTS;j++){
    	vector[j]=0;
    }
/*    for(j=0;j<2*NPOINTS;j++){
    	vecenviado[j]=0;
    }*/
}



void PoneTemp(int A, float Temp){
    char deciChar[1];
    uint16_t auxiliar, decima, entero;
    char aux[10];
    char cadena [4];
    char enteChar[2];
    switch(A){
		case 0:
			strcpy(cadena,"TBS ");
			break;
		case 1:
			strcpy(cadena,"TBH ");
			break;
		case 2:
			strcpy(cadena,"TGBHin ");
			break;
		case 3:
			strcpy(cadena,"TGBHex ");
			break;
		case 4:
			strcpy(cadena," TG ");
			break;
		case 5:
			strcpy(cadena," HR: ");
			break;
		default:
			strcpy(cadena,"     ");
			break;
    }
    auxiliar = (int)(Temp*10);
    decima = auxiliar - ((int)(auxiliar/10))*10;
    itoa(decima, deciChar);
    entero = (int)Temp;
    itoa(entero, enteChar);
    if (entero < 10) strcat(cadena, "0");
	strcat(cadena, enteChar);
    if(A<5){
    	strcat(cadena, ".");
		strcat(cadena, deciChar);
    }
    else strcat(cadena, " %");
   	strcpy(mens3,cadena);
}

uint32_t TomaSegundos(void){
	uint32_t Absoluto;
	current_time = RTCGetTime();
	Absoluto = current_time.RTC_Sec + 60*current_time.RTC_Min+3600*current_time.RTC_Hour;
	Dia = current_time.RTC_Yday;
	Mes = current_time.RTC_Mon;
	Year = current_time.RTC_Year;
	Segundos = current_time.RTC_Sec;
	Minutos = current_time.RTC_Min;
	Hora = current_time.RTC_Hour;
	return(Absoluto);
}

void MiraSensor(void){
	LPC_GPIO2->FIOMASK = (~(1<<13));
	salid=LPC_GPIO2->FIOPIN;
}

int Teclado(void){
	val=0;
	LPC_GPIO2->FIOMASK = (~(15<<3));
	lectura=LPC_GPIO2->FIOPIN;
	val1 = (lectura >>3);
	val = 15-val1;
	return(val);
}

void PresentaTMedicion(void){
	uint16_t auxi;

	LPC_GPIO2->FIOMASK = (~(1<<13));
	salid=LPC_GPIO2->FIOPIN;
	if(salid){
		strcpy(mens3,"BRAZ0");
	}
	else{
		strcpy(mens3,"CUERPO ENTERO");
	}
	GUI_Text_Draw_In_Credits (mens3, WHITE, BLACK, 50,14);
	itoa(TMedicion,aux);
	if(TMedicion<10){
		strcpy(mens3,"0");
		strcat(mens3,aux);
	}
	else{
		strcpy(mens3,aux);
	}
	GUI_Text_Draw_In_Credits (mens3, WHITE, BLACK, 95,24);
}

void Tiempito(int Bilardo){
	int m;
	for(j=0;j<1000000;j++){
        for(m=0;m<Bilardo;m++){
        }
    }
}

void PoneFechaHora(void){
	  RTCInit();
	  NVIC_EnableIRQ(RTC_IRQn);
	  LPC_RTC->CIIR = IMMIN | IMYEAR;
	  RTCStart();
}

/*void MandarVector(void)
{
	char coso[10];
	UARTSend(1, (uint8_t *)"S" ,1 );
	for(m=0;m<NPOINTS;m++){
	    itoa(vector[m],mens3);
	    coso[0]=13;
	    coso[1]=10;
	    strcat(mens3,coso);
		UARTSend(1, (uint8_t *)mens3 , strlen(mens3) );
	}
    itoa(diferencia,mens3);
    coso[0]=13;
    coso[1]=10;
    strcat(mens3,coso);
	UARTSend(1, (uint8_t *)mens3 , strlen(mens3) );
    itoa(promedio,mens3);
	UARTSend(1, (uint8_t *)mens3 , strlen(mens3) );
	UARTSend(1, (uint8_t *)"W" ,1 );
}*/
void MandarVectorA(void)
{
	char coso[10];
	UARTSend(1, (uint8_t *)"S" ,1 );
	for(m=0;m<NPOINTS;m++){
	    itoa(vector[m],mens3);
	    coso[0]=13;
	    coso[1]=10;
	    strcat(mens3,coso);
		UARTSend(1, (uint8_t *)mens3 , strlen(mens3) );
	}
}
void MandarVectorB(void)
{
	char coso[10];
	for(m=0;m<NPOINTS;m++){
	    itoa(vector[m],mens3);
	    coso[0]=13;
	    coso[1]=10;
	    strcat(mens3,coso);
		UARTSend(1, (uint8_t *)mens3 , strlen(mens3) );
	}
    itoa(diferencia,mens3);
    coso[0]=13;
    coso[1]=10;
    strcat(mens3,coso);
	UARTSend(1, (uint8_t *)mens3 , strlen(mens3) );
    itoa(promedio,mens3);
	UARTSend(1, (uint8_t *)mens3 , strlen(mens3) );
	UARTSend(1, (uint8_t *)"W" ,1 );
}

void Medicion(void){
	uint32_t i,k,j,auxiliar1,auxiliar2;
	int iMagnitude;
    inicio=SysTickCount;
    LPC_GPIO0->FIOSET = (1 << 22); // Turn LED2 on
//    for(m=0;m<600;m++){
		for(i=0;i<NPOINTS;i++){
			vector[i]=0;
		}
		for(i=0;i<NPOINTS;i++)
		{
			auxiliar1=0;
			for(j=0;j<25;j++){
				auxiliar1 += ADC0Read(0);	//Convert AD to Frequency
				for(k=0;k<3;k++);
			};
			vector[i]=(int)(auxiliar1/25);
		}
  //  }
    final=SysTickCount;
    LPC_GPIO0->FIOCLR = (1 << 22); // Turn LED2 off
    diferencia=final-inicio;
    auxiliar2=0;
    for(i=0;i<NPOINTS;i++){
    	auxiliar2+=vector[i];
    }
	promedio=(int)(auxiliar2/NPOINTS);

/*    for(i=0;i<NPOINTS;i++){
    	auxiliar1= vector[i]-promedio;
    	vector[i]=auxiliar1;
    }
*/
    MandarVectorA();

	for(j = 0; j < NPOINTS; j++)
	{
		psi_Input[2 * j] = (short int)vector[j];
		// Immaginary part of value n
		psi_Input[(2 * j) + 1] = 0;
	}

	// Perform defined FFT function
	vTest_PerformFFT();

	for(j = 0; j < NPOINTS; j++)
	{
		iMagnitude = (int)(pow(psi_Output[2 * j], 2) +
						   pow(psi_Output[(2 * j) + 1], 2));

		vector[j]= iMagnitude;		// AGREGADO
	}

	MandarVectorB();
}


// Window "Home"	PANTALLA PRESENTACION
// Window "Credits" PANTALLA DATALOGGER
// Window "Dimmer"  PANTALLA PRINCIPAL
// Window "Menu"	PANTALLA MENU INICIAL
// Window "Example" PANTALLA APAGADO
int main(void)

{
	uint16_t seguir0, seguir1, seguir2,seguir3, seguir4;
	int cursor1, tecla0, tecla1, tecla2, tecla3, tecla4, tecla5, old_cursor1;
	seguir0=1;
	seguir1=1;
	cursor1=0;
	seguir2=1;
	seguir3=1;
	seguir4=1;
	ModoData=0;
	NumPantalla=0;
	CantMediciones=0;	// CUANDO GRABE HAY QUE SACARLO
	Calibracion=0;
	SystemInit();	//Called by startup code
    LPC_PINCON->PINSEL4 &= (~(3 << 14));	// seteo el pin 2,7 como I/O
    LPC_GPIO2->FIODIR |= (1 << 7);
    LPC_GPIO2->FIOMASK = (~(1<<7));
	LPC_GPIO2->FIOCLR = (1 << 7); // apaga el led
    LPC_PINCON->PINSEL4 &= (~(3 << 26));	// seteo el pin 2,13 como I/O
    LPC_GPIO2->FIODIR |= (0<<13);	//pin 2,13 como entrada
    Tiempito(3);
    PoneFechaHora();
	ADCInit(8000000);	// inicializa el ADC con velocidad de muestreo rápida
	IniciarVariables();
	StartGUI ();
	CreateGUI ();
	GUI_Window_Draw ( "Home" );	//  PANTALLA PRESENTACION
	Tiempito(20);
    LPC_PINCON->PINSEL1 &= (~(3 << 12));
    LPC_GPIO0->FIODIR |= (1 << 22);
    LPC_GPIO2->FIODIR |= (1 << 7);

    LPC_GPIO2->FIOPIN |= (1<<13);

    LPC_GPIO2->FIOMASK = (~(1<<7));
	LPC_GPIO2->FIOSET = (1 << 7); // enciende el led

	InitSysTick(1);
	UARTInit(1, 115200);
	UART1Count = 0;
	q=0;
    MemoriaVacia=1;
    Sensor=1;	//Cuerpo Entero
    MedTie=0;
    TMedicion=VecTMedicion[MedTie];
    LeeMemoria();
//	while(seguir0) {	// seguir0 VALE SIEMPRE 1
//		tecla0=Teclado();
	//    if(tecla0){			// si se pulsa una tecla entra en el menu Pantalla 1
	  //  	NumPantalla=1;
	    //	Tiempito(1);
//	    	GUI_Window_Draw ( "Menu" ); // PANTALLA MENU INICIAL
	//    	Tiempito(5);
		//	seguir1=1;
			while(seguir1){
				GUI_Window_Draw ( "Menu" );	// PANTALLA PRINCIPAL
				GUI_Text_Draw_In_Menu ("=>", WHITE, BLACK, 2,11+10*cursor1);
				tecla1=Teclado();
				switch (tecla1){ 	// se pulsa una tecla en Pantalla Menú
					case 1:	// CANCEL NO HACE NADA
						break;
					case 2:	// ABAJO
						old_cursor1=cursor1;
						cursor1 ++;
						Tiempito(5);
						if(cursor1==5) cursor1=0;
/*						GUI_Text_Draw_In_Menu ("  ", WHITE, BLACK, 2,10);
						GUI_Text_Draw_In_Menu ("  ", WHITE, BLACK, 2,20);
						GUI_Text_Draw_In_Menu ("  ", WHITE, BLACK, 2,30);
						GUI_Text_Draw_In_Menu ("  ", WHITE, BLACK, 2,40);
						GUI_Text_Draw_In_Menu ("  ", WHITE, BLACK, 2,50);
						GUI_Text_Draw_In_Menu ("=>", WHITE, BLACK, 2,11+10*cursor1);*/
						GUI_Text_Draw_In_Menu ("  ", WHITE, BLACK, 2,11+10*old_cursor1);
						GUI_Text_Draw_In_Menu ("=>", WHITE, BLACK, 2,11+10*cursor1);
						break;
					case 4:	// ARRIBA
						old_cursor1=cursor1;
						cursor1 --;
						Tiempito(5);
						if(cursor1<0) cursor1=4;
/*						GUI_Text_Draw_In_Menu ("  ", WHITE, BLACK, 2,10);
						GUI_Text_Draw_In_Menu ("  ", WHITE, BLACK, 2,20);
						GUI_Text_Draw_In_Menu ("  ", WHITE, BLACK, 2,30);
						GUI_Text_Draw_In_Menu ("  ", WHITE, BLACK, 2,40);
						GUI_Text_Draw_In_Menu ("  ", WHITE, BLACK, 2,50);
						GUI_Text_Draw_In_Menu ("=>", WHITE, BLACK, 2,11+10*cursor1);*/
						GUI_Text_Draw_In_Menu ("  ", WHITE, BLACK, 2,11+10*old_cursor1);
						GUI_Text_Draw_In_Menu ("=>", WHITE, BLACK, 2,11+10*cursor1);
						break;
					case 8:	// ENTER PANTALLA MENU
						switch(cursor1){
							case 0:		// Entra en Pantalla Medición
								seguir2=1;
								GUI_Window_Draw ( "Credits" );	// PANTALLA MEDICION
								Tiempito(5);
								PresentaTMedicion();
								while(seguir2){
									tecla2=Teclado();
									switch (tecla2){ 	// se pulsa una tecla en Pant. Datalogger
					 					case 1:	// CANCEL NO HACE NADA
											seguir2=0;
											ModoData=0;
											GUI_Window_Draw ( "Menu" );
											break;
					 					case 2:
					 					case 4:
					 						MedTie++;
					 						if(MedTie==3) MedTie=0;
					 						TMedicion=VecTMedicion[MedTie];
					 						break;
										case 8: // ENTER
											Tiempito(5);
											GUI_Window_Draw ( "Credit2" );	// Pantalla confirma
											seguir3=1;						// Medición
											while(seguir3){
												tecla3=Teclado();
												switch (tecla3){ 	// se pulsa una tecla en Confirma Medición
													case 1:	// CANCEL SALE SIN HACER NADA
														seguir3=0;
														seguir2=0;
														ModoData=0;
														GUI_Window_Draw ( "Menu" );
														Tiempito(5);
														break;
													case 8:	// ENTER INGRESA A Medición
														seguir3=0;
														seguir2=0;
														seguir1=0;
														//ModoData=1;
													//	GUI_Window_Draw ( "Dimmer" );
														//inicio=TomaSegundos();
													//	LeeMemoria();
														Tiempito(5);
														break;
													default:
														break;
												}	// Fin switch tecla3
											}// FIN WHILE seguir3
											break;
									}	// Fin switch tecla2
								}	// FIN WHILE seguir2
								break;
							case 1:		// COMUNICACION A PC
//								current_time = RTCGetTime();
								seguir4=1;
								GUI_Window_Draw ( "Dimmer" ); // PANTALLA COMUNICACION
								GUI_Text_Draw_In_Dimmer ("=>", WHITE, BLACK, 2,30);
//								GUI_Text_Draw_In_Dimmer ("=>", WHITE, BLACK, 2,11+10*cursor1);
								while(seguir4){
									MiraUART1();
									tecla5=Teclado();
									if(tecla5==1){
										seguir4=0;
										GUI_Window_Draw ( "Menu" );
										Tiempito(5);
									}
								}
								break;
							case 2:
								seguir1=0;
								GUI_Window_Draw ( "Dimmer" ); // PANTALLA PRINCIPAL
								Tiempito(5);
								break;
							default:
								seguir1=0;
								GUI_Window_Draw ( "Example" ); // PANTALLA APAGADO
								Tiempito(10);
								for(k=0;k<20;k++){
									LPC_GPIO2->FIOMASK = (~(1<<7));
									LPC_GPIO2->FIOCLR = (1 << 7); // apaga el led
									Tiempito(5);
								}
								break;
						}
				}	// FIN SWITCH tecla1
			}	// FIN WHILE seguir1
//	    }
//	}
	return 0;
}

void BorraYGraba(void){
	/* Prepare for Erase the sector */
	iap_status = (__e_iap_status) iap_prepare_sector(CONFIG_FLASH_SECTOR,
			(CONFIG_FLASH_SECTOR + CONFIG_FLASH_SECTOR_SIZE));
//	if (iap_status != CMD_SUCCESS) UARTSend(1, (uint8_t *)"Error 1", 7 );
	/* Erase the sector */
	iap_status = (__e_iap_status) iap_erase_sector(CONFIG_FLASH_SECTOR,
			(CONFIG_FLASH_SECTOR + CONFIG_FLASH_SECTOR_SIZE));
//	if (iap_status != CMD_SUCCESS) UARTSend(1, (uint8_t *)"Error 2", 7 );
	/* Prepare the sector for writing */
	iap_status = (__e_iap_status) iap_prepare_sector(CONFIG_FLASH_SECTOR,
			(CONFIG_FLASH_SECTOR + CONFIG_FLASH_SECTOR_SIZE));
//	if (iap_status != CMD_SUCCESS) UARTSend(1, (uint8_t *)"Error 3", 7 );
	/* write data to flash */
	//iap_status = (__e_iap_status) iap_copy_ram_to_flash(&demo_messg, (void *)CONFIG_FLASH_OFFSET, 4096);//256);
	iap_status = (__e_iap_status) iap_copy_ram_to_flash(&stringMemory, (void *)CONFIG_FLASH_OFFSET, 4096);

//	if (iap_status != CMD_SUCCESS) UARTSend(1, (uint8_t *)"Error 4", 7 );
}

void LeeMemoria(void){
	GLCD_Bmp((uint8_t *)( CONFIG_FLASH_OFFSET));//+CONFIG_FLASH_SECTOR ));
}

void BorraMemoria(){
	strcpy(cadena,"");
	for(c=0; c<2*LARGO; c++) stringMemory[2*c] = cadena[c];
}

void Concatena(void){
	strcat(cadena, FechaHora);
	strcat(cadena,mens3);
	for(c=0; c<2*LARGO; c++) stringMemory[2*c] = cadena[c];
}
/*
void PreparaEnvio(void){
uint16_t k,p,Largo;
	Largo=strlen(cadena)/21;
	for(p=0;p<Largo;p++){
		for(k=0;k<21;k++){
			stringMemory[p*47+k]=cadena[p*21+k];
		}

		stringMemory[p*47+k]=13;		// retorno carro
		stringMemory[p*47+k+1]=10;
	}
	LargoEnvio=p*47;

    auxiliar = (int)(Temp*10);
    decima = auxiliar - ((int)(auxiliar/10))*10;
    itoa(decima, deciChar);
    entero = (int)Temp;
    itoa(entero, enteChar);
    if (entero < 10) strcat(cadena, "0");
	strcat(cadena, enteChar);
    if(A<5){
    	strcat(cadena, ".");
		strcat(cadena, deciChar);
    }
    else strcat(cadena, " %");
   	strcpy(mens3,cadena);

}*/
void PreparaEnvio(void){
uint16_t k,p,Largo,BS,BH,G,Tin,Tou,Hum;
uint16_t Aux[8];
	Largo=strlen(cadena)/21;
	for(p=0;p<Largo;p++){
		if(cadena[p*21]==57) cadena[p*21]=48;		//día < 10
		if(cadena[p*21+2]==57) cadena[p*21+2]=48;	//mes < 10
		if(cadena[p*21+6]==57) cadena[p*21+6]=48;	//hora < 10
		if(cadena[p*21+8]==57) cadena[p*21+8]=48;	//minutos < 10
		if(cadena[p*21+10]==57) cadena[p*21+10]=48;	//segundos<10
		BS=100*(cadena[p*21+12]-48)+10*(cadena[p*21+13]-48)+cadena[p*21+14]-48;
		BH=100*(cadena[p*21+15]-48)+10*(cadena[p*21+16]-48)+cadena[p*21+17]-48;
		G=100*(cadena[p*21+18]-48)+10*(cadena[p*21+19]-48)+cadena[p*21+20]-48;
		Tin=(int)(0.7*BH+0.3*G);				// ej.: Tin=325
		Tou=(int)(0.7*BH+0.2*G+0.1*BS);
		Aux[0]=(int)(Tin/100);			// Aux[0]=3
		Aux[1]=(int)((Tin-Aux[0]*100)/10);	// Aux[1]=2
		Aux[2]=Tin-100*Aux[0]-10*Aux[1];		// Aux[2]=5
		Aux[3]=(int)(Tou/100);
		Aux[4]=(int)((Tou-Aux[3]*100)/10);
		Aux[5]=Tou-100*Aux[3]-10*Aux[4];
//		TBS=(float)BS/10;
	//	TBH=(float)BH/10;
		//CalculaHR();
//		Aux[6]=(int)(HRentera/10);
	//	Aux[7]=HRentera-10*Aux[6];
		stringMemory[p*47]=cadena[p*21]; 		// DD
		stringMemory[p*47+1]=cadena[p*21+1];	// DD
		stringMemory[p*47+2]=47;	// '/'
		stringMemory[p*47+3]=cadena[p*21+2];	// MM
		stringMemory[p*47+4]=cadena[p*21+3];	// MM
		stringMemory[p*47+5]=47;	// '/'
		stringMemory[p*47+6]=cadena[p*21+4];	// AA
		stringMemory[p*47+7]=cadena[p*21+5];	// AA
		stringMemory[p*47+8]=32;	// ' ' espacio
		stringMemory[p*47+9]=cadena[p*21+6];	// hh
		stringMemory[p*47+10]=cadena[p*21+7];	// hh
		stringMemory[p*47+11]=58;	// ':'
		stringMemory[p*47+12]=cadena[p*21+8];	// mm
		stringMemory[p*47+13]=cadena[p*21+9];	// mm
		stringMemory[p*47+14]=58;	// ':'
		stringMemory[p*47+15]=cadena[p*21+10];	// ss
		stringMemory[p*47+16]=cadena[p*21+11];	// ss
		stringMemory[p*47+17]=32;	// ' ' espacio
		stringMemory[p*47+18]=cadena[p*21+12];	// TBS1
		stringMemory[p*47+19]=cadena[p*21+13];	// TBS2
		stringMemory[p*47+20]=46;	// '.' punto
		stringMemory[p*47+21]=cadena[p*21+14];	// TBS3
		stringMemory[p*47+22]=32;	// ' ' espacio
		stringMemory[p*47+23]=cadena[p*21+15];	// TBH1
		stringMemory[p*47+24]=cadena[p*21+16];	// TBH2
		stringMemory[p*47+25]=46;	// '.' punto
		stringMemory[p*47+26]=cadena[p*21+17];	// TBH3
		stringMemory[p*47+27]=32;	// ' ' espacio
		stringMemory[p*47+28]=cadena[p*21+18];	// TG1
		stringMemory[p*47+29]=cadena[p*21+19];	// TG2
		stringMemory[p*47+30]=46;	// '.' punto
		stringMemory[p*47+31]=cadena[p*21+20];	// TG3
		stringMemory[p*47+32]=32;	// ' ' espacio

		stringMemory[p*47+33]=Aux[6]+48;	// HR
		stringMemory[p*47+34]=Aux[7]+48;;
		stringMemory[p*47+35]=32;	// ' ' espacio
		stringMemory[p*47+36]=Aux[0]+48;	// Tin
		stringMemory[p*47+37]=Aux[1]+48;
		stringMemory[p*47+38]=46;	// '.' punto
		stringMemory[p*47+39]=Aux[2]+48;
		stringMemory[p*47+40]=32;	// ' ' espacio
		stringMemory[p*47+41]=Aux[3]+48;	// Tou
		stringMemory[p*47+42]=Aux[4]+48;
		stringMemory[p*47+43]=46;	// '.' punto
		stringMemory[p*47+44]=Aux[5]+48;
		stringMemory[p*47+45]=13;		// retorno carro
		stringMemory[p*47+46]=10;
	}
	LargoEnvio=p*47;
}

void EnviaInfo(void){
	LPC_UART1->IER = IER_THRE | IER_RLS;
	UARTSend(1, (uint8_t *)"S" ,1 );
	UARTSend(1, (uint8_t *)FechaHora, strlen(FechaHora) );
	UARTSend(1, (uint8_t *)"W" ,1 );
	UART1Count = 0;
	LPC_UART1->IER = IER_THRE | IER_RLS | IER_RBR;
}

void DesculaFH(void){
uint16_t m;
	while (estafeta[m] != '\0'){
	FH[m]=estafeta[m]-48;
	m++;
	}
	Dia=10*FH[1]+FH[2]; if(Dia>90) Dia -=90;
	Mes=10*FH[3]+FH[4]; if(Mes>90) Mes -=90;
	Year=10*FH[5]+FH[6]; Year +=2000;
	Hora=10*FH[7]+FH[8]; if(Hora>90) Hora -=90;
	Minutos=10*FH[9]+FH[10]; if(Minutos>90) Minutos -=90;
	Segundos=10*FH[11]+FH[12]; if(Segundos>90) Segundos -=90;
		  local_time.RTC_Sec = Segundos;
		  local_time.RTC_Min = Minutos;
		  local_time.RTC_Hour = Hora;
		  local_time.RTC_Mday = 8;
		  local_time.RTC_Wday = 3;
		  local_time.RTC_Yday = Dia;		// current date
		  local_time.RTC_Mon = Mes;
		  local_time.RTC_Year = Year;
		  RTCSetTime( local_time );		/* Set local time */

}

void RecibeFechaHora(){
	while(UART1Count<13){
	}
	strcpy(estafeta,(char *)UART1Buffer);
	q=0;
	DesculaFH();
	UART1Count = 0;
}


void ConstruyeFH(void){
	current_time = RTCGetTime();
	DI=current_time.RTC_Yday;
	ME=current_time.RTC_Mon;
	AN=current_time.RTC_Year;
	HO=current_time.RTC_Hour;
	MI=current_time.RTC_Min;
	SE=current_time.RTC_Sec;

	strcpy(FechaHora, "");

	if(DI<10) DI +=90;
	itoa(DI, aux);
	strcat(FechaHora, aux);

	if(ME<10) ME +=90;
	itoa(ME, aux);
	strcat(FechaHora, aux);

	AN-=2000;
	itoa(AN, aux);
	strcat(FechaHora, aux);

	if(HO<10) HO+=90;
	itoa(HO, aux);
	strcat(FechaHora, aux);

	if(MI<10) MI+=90;
	itoa(MI, aux);
	strcat(FechaHora, aux);

	if(SE<10) SE+=90;
	itoa(SE, aux);
	strcat(FechaHora, aux);
}

void MiraUART1(void){
	if ( UART1Count != 0 )
	{
		switch(UART1Buffer[0]){
		case 'R':	// BORRA Y GRABA
			LPC_UART1->IER = IER_THRE | IER_RLS;
			BorraYGraba();
			UARTSend(1, (uint8_t *)"Fin de codigo escritura en flash", 34 );
			UART1Count = 0;
			LPC_UART1->IER = IER_THRE | IER_RLS | IER_RBR;
		break;
/*		case 'S':	// LEE MEMORIA Y ENVIA A PC (TERMINA EN 'W')
			LPC_UART1->IER = IER_THRE | IER_RLS;
			LeeMemoria();
			PreparaEnvio();
			UARTSend(1, (uint8_t *)stringMemory, LargoEnvio);
			UARTSend(1, (uint8_t *)"W", 1 );
			UART1Count = 0;
			LPC_UART1->IER = IER_THRE | IER_RLS | IER_RBR;
			LPC_GPIO0->FIOSET = (1 << 22); // Turn LED2 on
		break;	*/
		case 'S':
			IniciarVariables();
			LPC_UART1->IER = IER_THRE | IER_RLS;
			Medicion();
			UART1Count = 0;
			LPC_UART1->IER = IER_THRE | IER_RLS | IER_RBR;
		case 'B':	//Borrar
			LPC_UART1->IER = IER_THRE | IER_RLS;
			UARTSend(1, (uint8_t *)UART1Buffer, UART1Count );
			BorraMemoria();
			UARTSend(1, (uint8_t *)stringMemory, strlen(stringMemory));
			UARTSend(1, (uint8_t *)"Fin de borrado en flash", 25 );
			UART1Count = 0;
			LPC_UART1->IER = IER_THRE | IER_RLS | IER_RBR;

		break;
		case 'C':
			LPC_UART1->IER = IER_THRE | IER_RLS;
			UARTSend(1, (uint8_t *)UART1Buffer, UART1Count );
			Concatena();
			UARTSend(1, (uint8_t *)stringMemory, strlen(stringMemory));
			UARTSend(1, (uint8_t *)"Fin de concatenado en flash", 29 );
			UART1Count = 0;
			LPC_UART1->IER = IER_THRE | IER_RLS | IER_RBR;

		break;
		case 'Y':
	//		strcpy(estafeta,"");
			RecibeFechaHora();
		break;
		case 'T':
			ConstruyeFH();
			EnviaInfo();
		break;
		case 'X':
			LPC_UART1->IER = IER_THRE | IER_RLS;
			BorraMemoria();
			BorraYGraba();
			UART1Count = 0;
			LPC_UART1->IER = IER_THRE | IER_RLS | IER_RBR;
			MemoriaVacia=1;
		break;
		default:
			{

			for(c=0; c<4*LARGO; c++) stringMemory[c]=32;

			ConstruyeFH();
			//                strcat(cadena, FechaHora);
			LPC_UART1->IER = IER_THRE | IER_RLS;
			UARTSend(1, (uint8_t *)UART1Buffer, UART1Count );
			UARTSend(1, (uint8_t *)FechaHora, strlen(FechaHora));
			UART1Count = 0;
			LPC_UART1->IER = IER_THRE | IER_RLS | IER_RBR;
		}
		break;
		}
	}
}

void StartGUI ()
{
	GUI_DefineHeapMalloc ( pvPortMalloc );
	GUI_DefineHeapFree ( vPortFree );
	GUI_StartLibrary ();
}

void CreateGUI ()
{
	// Window "Home"	PRESENTACION
	GUI_Window_Create ( "Home", "None", WHITE, "BIENVENIDO", NULL, NULL, NULL );
	GUI_Text_Create ( "Home", "txtAp1", 24, 20, WHITE, "", BLACK, "VIBROMETRO" );
	//GUI_Text_Create ( "Home", "txtAp2", 48, 23, WHITE, "", BLACK, "Campeon" );
//	GUI_Text_Create ( "Home", "txtAp3", 48, 34, WHITE, "", BLACK, "Perfumo" );
	GUI_Button_Create ( "Home", "btnHome1", 12, 52, 34, 40, BLACK, "", WHITE, "KUMELEN",
						wndHome_btnSettings_OnClik, NULL, NULL, NULL );
//	GUI_Picture_Create ( "Home", "picFiuba1", 5, 16, 35, 40, fiuba, BLACK,
//						 wndHome_picFiuba_OnClik );

	// Window "Credits" PANTALLA DATALOGGER
	GUI_Window_Create ( "Credits", "None", WHITE, "", NULL, NULL, NULL );
	GUI_Text_Create ( "Credits", "txtInfo6", 5, 1, BLACK, "", WHITE, "   MEDICION " );
	GUI_Text_Create ( "Credits", "txtInfo3", 5, 15, WHITE, "", BLACK, "SENSOR" );
	GUI_Text_Create ( "Credits", "txtInfo3", 5, 25, WHITE, "", BLACK, "T. MEDICION(s)" );
	GUI_Text_Create ( "Credits", "txtInfo3", 5, 45, WHITE, "", BLACK, "INICIAR => <ENTER> " );
	GUI_Text_Create ( "Credits", "txtInfo3", 5, 55, WHITE, "", BLACK, "VOLVER  => <CANCEL>" );

	// Window "Credit2" PANTALLA CONFIRMA DATALOGGER
	GUI_Window_Create ( "Credit2", "None", WHITE, "", NULL, NULL, NULL );
	GUI_Text_Create ( "Credit2", "txtInfo6", 5, 1, BLACK, "", WHITE, " CONFIRMA" );
	GUI_Text_Create ( "Credit2", "txtInfo3", 5, 25, WHITE, "", BLACK, "  SI  =>  <ENTER>   " );
	GUI_Text_Create ( "Credit2", "txtInfo3", 5, 45, WHITE, "", BLACK, "  NO  =>  <CANCEL>   " );

	// Window "Credit3" PANTALLA COMUNICACION PC
	GUI_Window_Create ( "Credit3", "None", WHITE, "", NULL, NULL, NULL );
	GUI_Text_Create ( "Credit3", "txtInfo6", 5, 1, BLACK, "", WHITE, " COMUNICACION A PC" );
	GUI_Text_Create ( "Credit3", "txtInfo3", 5, 50, WHITE, "", BLACK, "SALIR   => <CANCEL> " );

	// Window "Menu"
	GUI_Window_Create ( "Menu", "None", WHITE, "", NULL, NULL, NULL );
	GUI_Text_Create ( "Menu", "txtInfo6", 5, 1, BLACK, "", WHITE, "       MENU" );
	GUI_Text_Create ( "Menu", "txto44", 20, 11, WHITE, "", BLACK, "MEDICION      " );
	GUI_Text_Create ( "Menu", "txto45", 20, 21, WHITE, "", BLACK, "LAPSO MEDICION" );
	GUI_Text_Create ( "Menu", "txto46", 20, 31, WHITE, "", BLACK, "VER ANTERIORES" );
	GUI_Text_Create ( "Menu", "txto46", 20, 41, WHITE, "", BLACK, "BORRAR MEMORIA" );
	GUI_Text_Create ( "Menu", "txto46", 20, 51, WHITE, "", BLACK, "SALIR         " );

	// Window "Example"
	GUI_Window_Create ( "Example", "", WHITE, "", NULL, NULL, NULL );
	GUI_Text_Create ( "Example", "", 25, 23, WHITE, "", BLACK, " APAGANDO " );
	GUI_Text_Create ( "Example", "", 25, 43, WHITE, "", BLACK, "  NS 302 " );

	// Window "Dimmer"
	GUI_Window_Create ( "Dimmer", "", WHITE, "" ,NULL, NULL, NULL );
	GUI_Text_Create ( "Dimmer", "txt0", 3, 1, BLACK, "", WHITE, "LAPSO MEDICION (seg)" );
//	GUI_Text_Create ( "Dimmer", "txt0", 3, 21, BLACK, "", WHITE, "qUE SE YO" );
	GUI_Text_Create ( "Dimmer", "txtLuz5", 20, 15, WHITE, "", BLACK, "  5" );
	GUI_Text_Create ( "Dimmer", "txtLu30", 20, 30, WHITE, "", BLACK, " 20" );
	GUI_Text_Create ( "Dimmer", "txtL120", 20, 45, WHITE, "", BLACK, "120" );

}

void wndHome_btnSettings_OnClik ( void* parameter )
{
	GUI_Window_Draw ( "Menu" );
}

void wndHome_picFiuba_OnClik ( void* parameter )
{
	GUI_Window_Draw ( "Credits" );
}

void wndCredits_btnBack_OnClik ( void* parameter )
{
	GUI_Window_Draw ( "Home" );
}

void wndMenu_btnExample_OnClik ( void* parameter )
{
	GUI_Window_Draw ( "Example" );
}

void wndMenu_btnDimmer_OnClik ( void* parameter )
{
	GUI_Window_Draw ( "Dimmer" );
}

void wndMenu_btnBack_OnClik ( void* parameter )
{
	GUI_Window_Draw ( "Home" );
}

void wndExample_btnBack_OnClik ( void* parameter )
{
	GUI_Window_Draw ( "Menu" );
}

void wndExample_btnChange_OnClik (void* paramater)
{
	TText* pText;

	// Get the GUI's object
	pText = (TText*) GUI_Window_SearchObject ("txtLed");
	if ( strcmp (pText->text, " LED OFF ") == 0 )
	{
		pText->text = " LED ON ";
		LPC_GPIO0->FIODIR |= (1<<18);
		LPC_GPIO0->FIOSET = (1<<18);
	}
	else
	{
		pText->text = " LED OFF ";
		LPC_GPIO0->FIODIR |= (1<<18);
		LPC_GPIO0->FIOCLR = (1<<18);
	}
}

void wndDimmer_tsLivinL1_OnChange ( void* parameter )
{

}

void wndDimmer_tsBedroomL1_OnChange ( void* parameter )
{

}

void wndDimmer_btnBack_OnClik ( void* parameter )
{
	GUI_Window_Draw ( "Menu" );
}

void EINT3_IRQHandler (void)
{
	portBASE_TYPE xHigherPriorityTaskWoken;

	NVIC_DisableIRQ(EINT3_IRQn); 			// Disable the interrupt

	LPC_SC->EXTINT = EINT3; 				// Clear the external interrupt flag
	LPC_GPIOINT->IO0IntClr = 0x01000000; 	// Clear the specific pin interrupt flag

	// Give semaphore
	xSemaphoreGiveFromISR (semaphore_TouchInterrupt, &xHigherPriorityTaskWoken);
}

void ConfigExternalInterrupt ( )
{
	// Configuration of the external interrupt
	LPC_GPIOINT->IO0IntEnF = 0x01000000; 	// Port0.24 (falling edge)
	LPC_SC->EXTMODE = EINT3_EDGE; 			// INT3 edge trigger
	LPC_SC->EXTPOLAR = 0;					// INT3 is falling edge

	// Enable the external interrupt
	NVIC_EnableIRQ(EINT3_IRQn);				// Enable the interrupt
	LPC_SC->EXTINT = EINT3; 				// Clear the external interrupt flag
	LPC_GPIOINT->IO0IntClr = 0x01000000; 	// Clear the specific pin interrupt flag
}

void Task_TouchPanel( void *pvParameters )
{
	portTickType xLastWakeTime;
	uint8_t isEventDetected = 0;
	TouchPanel_TEvent event;
	GLCDgui_TEvent GUIEvent;
	int a;

	for( ;; )
	{
		// Take semaphore
		xSemaphoreTake (semaphore_TouchInterrupt, portMAX_DELAY);

		// Execute until an event is detected
		do
		{
			// TouchPanel_Read must be invoked some times to determine if an event exist
			isEventDetected = TouchPanel_Read ( &(event) );

			// Delay until execute TouchPanel_Read again
			vTaskDelay (50/portTICK_RATE_MS);

		} while ( isEventDetected == 0 );

		// When the do-while stop the event must be raised using the GUI library
		switch (event.eventType)
		{
			case CLICK:
				GUIEvent.xCoordinate = event.xCoordinate;
				GUIEvent.yCoordinate = event.yCoordinate;
				GUIEvent.eventType = GLCD_CLICK;
				GUI_Window_RaiseEvent (&GUIEvent);
				GUI_Window_RedrowActiveWindow ();
			break;

			case DOUBLECLICK:

			break;

			case SCROLL_LEFTTORIGHT:
				GUIEvent.xCoordinate = event.xCoordinate;
				GUIEvent.yCoordinate = event.yCoordinate;
				GUIEvent.eventType = GLCD_SCROLL_LEFTTORIGHT;
				GUI_Window_RaiseEvent (&GUIEvent);
			break;

			case SCROLL_RIGHTTOLEFT:
			break;

			case DRAG:
			break;

			case DROP:
			break;

			case NOEVENT:
				a = 2;
			break;
		}

		isEventDetected = 0;

		// Start and configure the external interrupt
		ConfigExternalInterrupt ( );
	}
}

void vApplicationMallocFailedHook ( void )
{
	for( ;; );
}

void vApplicationStackOverflowHook ( xTaskHandle *pxTask, signed char *pcTaskName )
{
	for( ;; );
}

void vApplicationIdleHook ( void )
{

}

void vApplicationTickHook ( void )
{

}

/*****************************************************************************
** Function name:   vTest_PerformFFT
**
** Descriptions:    Perform one of the FFT functions
**
** Parameters:	    None
**
** Returned value:  None
**
******************************************************************************/
static void vTest_PerformFFT(void)
{
	#ifdef NPOINTS
	{
		#if (NPOINTS == NPOINTS_64)
		{
			vF_dspl_fftR4b16N64(psi_Output, psi_Input);
		}
		#elif (NPOINTS == NPOINTS_256)
		{
			vF_dspl_fftR4b16N256(psi_Output, psi_Input);
		}
		#elif (NPOINTS == NPOINTS_1024)
		{
			vF_dspl_fftR4b16N1024(psi_Output, psi_Input);
		}
		#elif (NPOINTS == NPOINTS_4096)
		{
			vF_dspl_fftR4b16N4096(psi_Output, psi_Input);
		}
		#else
		{
			#error "NPOINTS Not Valid!"
		}
		#endif
	}
	#else
	{
		#error "NPOINTS Not Defined!"
	}
	#endif
}

/*****************************************************************************
 **                            End Of File
 *****************************************************************************/


